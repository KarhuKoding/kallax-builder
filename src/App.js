import {
  OrbitControls,
  Stage,
  Circle,
  PerspectiveCamera,
  TorusKnot,
  Html,
  useGLTF,
} from "@react-three/drei";
import { Canvas } from "@react-three/fiber";

import React, { Suspense, useMemo, useRef } from "react";
import { createPortal, useFrame } from "@react-three/fiber";
import * as THREE from "three";

import ScrollListener from "./lib/ScrollListener";
// Components
import Shelf from "./components/Shelf/Shelf";
import UI from "./components/UI/UI";
import { CamlockAnimtion } from "./components/UI/CamlockAnimation";

import "./styles.css";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

export function SpeakingBubble(props) {
  const { nodes, materials } = useGLTF("/speakingBubble.glb");
  return (
    <mesh
      geometry={nodes.Circle.geometry}
      material={nodes.Circle.material}
      rotation={[Math.PI / 2, 0, 0]}
      scale={0.45}
      position={[0, 0, -0.001]}
    />
  );
}

function RenderTargetPlane() {
  const cam = useRef();
  const [scene, target] = useMemo(() => {
    const scene = new THREE.Scene();
    scene.background = new THREE.Color("orange");

    const target = new THREE.WebGLMultisampleRenderTarget(1024, 1024, {
      format: THREE.RGBFormat,
      stencilBuffer: false,
    });
    target.samples = 8;
    return [scene, target];
  }, []);

  useFrame((state) => {
  
    state.gl.setRenderTarget(target);
    state.gl.render(scene, cam.current);
    state.gl.setRenderTarget(null);
  });

  return (
    <>
      <PerspectiveCamera ref={cam} position={[0, 0, 3]} />
      {createPortal(<CamlockAnimtion />, scene)}

      <Circle args={[0.2, 32]}>
        <meshStandardMaterial attach="material" map={target.texture} />
        <SpeakingBubble />
      </Circle>
    </>
  );
}

export default function App() {
  return (
    <div className="App">
      <Canvas shadows>
        <Suspense fallback={null}>
          <Stage environment="city" intensity={0.6}>
            <ScrollListener>
              <RenderTargetPlane />

              <Shelf />
        

              <UI />
            </ScrollListener>
          </Stage>
        </Suspense>
        <OrbitControls enableZoom={false} />
      </Canvas>
    </div>
  );
}
